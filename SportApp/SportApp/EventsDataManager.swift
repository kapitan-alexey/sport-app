import Foundation
import SwiftUI
import Combine

// MARK: - Events Data Manager with Caching
/// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
/// –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω MVVM –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–µ–∂–¥—É UI, –∫–µ—à–µ–º –∏ API
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –∫–µ—à–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@MainActor
class EventsDataManager: ObservableObject {
    
    // MARK: - Published Properties –¥–ª—è SwiftUI
    /// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –≤ UI
    @Published var events: [SportEvent] = []
    
    /// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ ProgressView
    @Published var isLoading = false
    
    /// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ UI
    @Published var errorMessage: String?
    
    /// –°—Ç–∞—Ç—É—Å –∫–µ—à–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ debug info
    @Published var cacheStatus: CacheStatus = CacheStatus(
        hasCache: false, isValid: false, lastUpdate: nil, size: "0 B", eventCount: 0
    )
    
    /// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–≥–æ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞ (–¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    @Published var isDataFromCache = false
    
    /// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    @Published var isBackgroundRefreshing = false
    
    // MARK: - Private Properties
    private let apiService = ApiService.shared
    private let cache = SportsEventsCache.shared
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    init() {
        setupNotificationObservers()
        updateCacheStatus()
    }
    
    // MARK: - Main Loading Methods
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å —É–º–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
    func loadEvents() async {
        print("üöÄ [Manager] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–±—ã—Ç–∏–π")
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if events.isEmpty {
            isLoading = true
            errorMessage = nil
        }
        
        do {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º cache-first —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ UX
            let loadedEvents = try await apiService.loadEventsWithCache(strategy: .cacheFirst)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await updateEventsOnMainThread(loadedEvents, fromCache: cache.isCacheValid())
            
            print("‚úÖ [Manager] –°–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: \(loadedEvents.count)")
            
        } catch {
            await handleLoadingError(error)
        }
        
        isLoading = false
        updateCacheStatus()
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (pull-to-refresh)
    /// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫–µ—à –∏ –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    func refreshEvents() {
        print("üîÑ [Manager] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π")
        
        Task {
            isBackgroundRefreshing = true
            errorMessage = nil
            
            do {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º API-first —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                let freshEvents = try await apiService.loadEventsWithCache(strategy: .apiFirst)
                await updateEventsOnMainThread(freshEvents, fromCache: false)
                
                print("‚úÖ [Manager] –°–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: \(freshEvents.count)")
                
            } catch {
                await handleRefreshError(error)
            }
            
            isBackgroundRefreshing = false
            updateCacheStatus()
        }
    }
    
    /// –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫–µ—à–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ onAppear –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
    func loadCachedEventsImmediately() {
        print("‚ö° [Manager] –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫–µ—à–∞")
        
        guard let cachedEvents = cache.loadCachedEvents() else {
            print("üìÇ [Manager] –ö–µ—à –ø—É—Å—Ç, –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
            return
        }
        
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        events = cachedEvents
        isDataFromCache = true
        errorMessage = nil
        updateCacheStatus()
        
        print("‚úÖ [Manager] –ü–æ–∫–∞–∑–∞–Ω–æ \(cachedEvents.count) —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–µ—à–∞")
        
        // –ï—Å–ª–∏ –∫–µ—à —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if !cache.isCacheValid() {
            print("üîÑ [Manager] –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            Task {
                await loadEvents()
            }
        }
    }
    
    // MARK: - Cache Management
    
    /// –û—á–∏—â–∞–µ—Ç –∫–µ—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
    func clearCacheAndReload() {
        print("üóëÔ∏è [Manager] –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")
        
        apiService.clearCache()
        events = []
        isDataFromCache = false
        updateCacheStatus()
        
        Task {
            await loadEvents()
        }
    }
    
    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (offline —Ä–µ–∂–∏–º)
    func switchToOfflineMode() {
        print("üì± [Manager] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ offline —Ä–µ–∂–∏–º")
        
        Task {
            do {
                let offlineEvents = try await apiService.loadEventsWithCache(strategy: .cacheOnly)
                await updateEventsOnMainThread(offlineEvents, fromCache: true)
                
            } catch {
                await MainActor.run {
                    errorMessage = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è offline —Ä–µ–∂–∏–º–∞"
                    events = []
                }
            }
            
            updateCacheStatus()
        }
    }
    
    // MARK: - Private Helper Methods
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º UI
    private func updateEventsOnMainThread(_ newEvents: [SportEvent], fromCache: Bool) async {
        await MainActor.run {
            self.events = newEvents
            self.isDataFromCache = fromCache
            self.errorMessage = nil
            
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
            if fromCache && !cache.isCacheValid() {
                self.errorMessage = "–ü–æ–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª–∏)"
            }
        }
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É–º–Ω—ã–º fallback –Ω–∞ –∫–µ—à
    private func handleLoadingError(_ error: Error) async {
        print("‚ùå [Manager] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: \(error.localizedDescription)")
        
        await MainActor.run {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            if let cachedEvents = cache.loadCachedEvents(), !cachedEvents.isEmpty {
                self.events = cachedEvents
                self.isDataFromCache = true
                self.errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞."
                
                print("‚úÖ [Manager] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏")
                
            } else {
                // –ù–µ—Ç –∫–µ—à–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                self.events = []
                self.isDataFromCache = false
                self.errorMessage = error.localizedDescription
                
                print("‚ùå [Manager] –ù–µ—Ç –∫–µ—à–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            }
        }
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    private func handleRefreshError(_ error: Error) async {
        print("‚ö†Ô∏è [Manager] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: \(error.localizedDescription)")
        
        await MainActor.run {
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ refresh –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            if !events.isEmpty {
                self.errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å. –ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–µ–∂–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ."
            } else {
                self.errorMessage = error.localizedDescription
            }
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–µ—à–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
    private func updateCacheStatus() {
        cacheStatus = cache.getCacheStatus()
    }
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    private func setupNotificationObservers() {
        // –°–ª—É—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–æ–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        NotificationCenter.default.publisher(for: .sportsEventsUpdatedInBackground)
            .compactMap { $0.object as? [SportEvent] }
            .receive(on: DispatchQueue.main)
            .sink { [weak self] updatedEvents in
                self?.handleBackgroundUpdate(updatedEvents)
            }
            .store(in: &cancellables)
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    private func handleBackgroundUpdate(_ updatedEvents: [SportEvent]) {
        print("üîÑ [Manager] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: \(updatedEvents.count) —Å–æ–±—ã—Ç–∏–π")
        
        // –¢–∏—Ö–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
        events = updatedEvents
        isDataFromCache = false
        updateCacheStatus()
        
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å subtle —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
        if errorMessage?.contains("–∫–µ—à–∞") == true {
            errorMessage = nil // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        }
    }
    
    // MARK: - Utility Methods
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ –∫–µ—à–µ
    var cachedEventsCount: Int {
        cache.loadCachedEvents()?.count ?? 0
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –∫–µ—à
    var isCacheValid: Bool {
        cache.isCacheValid()
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
    var lastCacheUpdate: Date? {
        cache.getLastUpdateDate()
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    var dataSourceDescription: String {
        if isLoading {
            return "–ó–∞–≥—Ä—É–∑–∫–∞..."
        } else if isDataFromCache {
            return isCacheValid ? "–î–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)" : "–î–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ (–º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏)"
        } else {
            return "–°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞"
        }
    }
    
    // MARK: - Filter Support Methods
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è FilterView
    var availableCities: [String] {
        Array(Set(events.map { $0.cityName })).sorted()
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è FilterView
    var availableSports: [String] {
        let allSports = events.flatMap { $0.sports.map { $0.name } }
        return Array(Set(allSports)).sorted()
    }
}

// MARK: - Filter Criteria (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
struct EventFilterCriteria {
    var selectedSports: Set<String> = []
    var selectedCities: Set<String> = []
    var dateRange: DateRange?
    var showOnlyAvailableForRegistration: Bool = false
    
    struct DateRange {
        let from: Date
        let to: Date
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    var hasActiveFilters: Bool {
        return !selectedSports.isEmpty ||
               !selectedCities.isEmpty ||
               dateRange != nil ||
               showOnlyAvailableForRegistration
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    func matches(event: SportEvent) -> Bool {
        // –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        if !selectedSports.isEmpty {
            let eventSports = Set(event.sports.map { $0.name.lowercased() })
            let filterSports = Set(selectedSports.map { $0.lowercased() })
            if eventSports.isDisjoint(with: filterSports) {
                return false
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º
        if !selectedCities.isEmpty {
            if !selectedCities.contains(event.cityName) {
                return false
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
        if let dateRange = dateRange {
            if event.date < dateRange.from || event.date > dateRange.to {
                return false
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if showOnlyAvailableForRegistration && !event.canRegister {
            return false
        }
        
        return true
    }
}

// MARK: - Debug Extensions –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
extension EventsDataManager {
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è debug –∫–æ–Ω—Å–æ–ª–∏
    var debugInfo: String {
        let cacheStatus = cache.getCacheStatus()
        
        return """
        üìä EventsDataManager Debug Info:
        - –°–æ–±—ã—Ç–∏—è –≤ –ø–∞–º—è—Ç–∏: \(events.count)
        - –ó–∞–≥—Ä—É–∑–∫–∞: \(isLoading ? "–î–∞" : "–ù–µ—Ç")
        - –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: \(isBackgroundRefreshing ? "–î–∞" : "–ù–µ—Ç")
        - –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞: \(isDataFromCache ? "–î–∞" : "–ù–µ—Ç")
        - –û—à–∏–±–∫–∞: \(errorMessage ?? "–ù–µ—Ç")
        - –ö–µ—à –∞–∫—Ç—É–∞–ª–µ–Ω: \(cacheStatus.isValid ? "–î–∞" : "–ù–µ—Ç")
        - –†–∞–∑–º–µ—Ä –∫–µ—à–∞: \(cacheStatus.size)
        - –°–æ–±—ã—Ç–∏—è –≤ –∫–µ—à–µ: \(cacheStatus.eventCount)
        - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: \(lastCacheUpdate?.description ?? "–ù–∏–∫–æ–≥–¥–∞")
        """
    }
    
    /// –ü—Ä–∏–Ω—Ç–∏—Ç debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
    func printDebugInfo() {
        print(debugInfo)
    }
}

// MARK: - Notification Names
extension Notification.Name {
    /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    static let sportsEventsUpdatedInBackground = Notification.Name("sportsEventsUpdatedInBackground")
}
