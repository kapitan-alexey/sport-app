import SwiftUI
import FirebaseAnalytics

// MARK: - Main Content View with Enhanced Caching
struct ContentView: View {
    @StateObject private var eventsManager = EventsDataManager()
    @State private var selectedTab = 0
    @State private var searchText = ""
    @State private var filterCriteria = FilterCriteria()
    @State private var showingCacheSettings = false

    var body: some View {
        VStack(spacing: 0) {
            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if selectedTab == 0 {
                NavigationView {
                    ZStack {
                        Color.black.ignoresSafeArea(.all)

                        VStack(spacing: 0) {
                            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∫–µ—à–∞
                            HeaderView(
                                searchText: $searchText,
                                filterCriteria: $filterCriteria,
                                eventsManager: eventsManager,
                                showingCacheSettings: $showingCacheSettings
                            )
                            .padding(.horizontal, 16)
                            .padding(.top, 8)

                            // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                            if filterCriteria.hasActiveFilters {
                                ActiveFiltersView(filterCriteria: $filterCriteria)
                                    .padding(.horizontal, 16)
                                    .padding(.top, 12)
                            }
                            
                            Spacer().frame(height: 16)

                            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                            MainContentView(
                                eventsManager: eventsManager,
                                filteredEvents: filteredEvents
                            )
                        }
                    }
                }
            } else if selectedTab == 1 {
                FavoritesView()
            } else {
                SettingsView()
            }
            
            // –ö–∞—Å—Ç–æ–º–Ω—ã–π TabBar
            HStack(spacing: 0) {
                Button(action: {
                    let previousTab = selectedTab
                    selectedTab = 0
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
                    if previousTab != 0 {
                        Analytics.logEvent("tab_switched", parameters: [
                            "tab_name": "events",
                            "previous_tab": previousTab == 1 ? "favorites" : "unknown"
                        ])
                        print("üìä [Analytics] Switched to events tab from tab \(previousTab)")
                    }
                }) {
                    VStack(spacing: 4) {
                        Image(systemName: "trophy")
                            .font(.title2)
                            .foregroundColor(selectedTab == 0 ? Color(red: 18/255, green: 250/255, blue: 210/255) : .gray)
                        Text("–°–æ–±—ã—Ç–∏—è")
                            .font(.custom("HelveticaNeue", size: 14))
                            .foregroundColor(selectedTab == 0 ? Color(red: 18/255, green: 250/255, blue: 210/255) : .gray)
                    }
                }
                .frame(maxWidth: .infinity)
                
                Button(action: {
                    let previousTab = selectedTab
                    selectedTab = 1
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
                    if previousTab != 1 {
                        Analytics.logEvent("tab_switched", parameters: [
                            "tab_name": "favorites",
                            "previous_tab": previousTab == 0 ? "events" : "unknown"
                        ])
                        print("üìä [Analytics] Switched to favorites tab from tab \(previousTab)")
                    }
                }) {
                    VStack(spacing: 4) {
                        Image(systemName: "heart")
                            .font(.title2)
                            .foregroundColor(selectedTab == 1 ? Color(red: 18/255, green: 250/255, blue: 210/255) : .gray)
                        Text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
                            .font(.custom("HelveticaNeue", size: 14))
                            .foregroundColor(selectedTab == 1 ? Color(red: 18/255, green: 250/255, blue: 210/255) : .gray)
                    }
                }
                .frame(maxWidth: .infinity)
                
                Button(action: {
                    let previousTab = selectedTab
                    selectedTab = 2
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
                    if previousTab != 2 {
                        Analytics.logEvent("tab_switched", parameters: [
                            "tab_name": "settings",
                            "previous_tab": previousTab == 0 ? "events" : (previousTab == 1 ? "favorites" : "unknown")
                        ])
                        print("üìä [Analytics] Switched to settings tab from tab \(previousTab)")
                    }
                }) {
                    VStack(spacing: 4) {
                        Image(systemName: "gearshape")
                            .font(.title2)
                            .foregroundColor(selectedTab == 2 ? Color(red: 18/255, green: 250/255, blue: 210/255) : .gray)
                        Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                            .font(.custom("HelveticaNeue", size: 14))
                            .foregroundColor(selectedTab == 2 ? Color(red: 18/255, green: 250/255, blue: 210/255) : .gray)
                    }
                }
                .frame(maxWidth: .infinity)
            }
            .padding(.vertical, 12)
            .background(Color.black)
            .overlay(
                Rectangle()
                    .frame(height: 0.5)
                    .foregroundColor(Color.gray.opacity(0.3)),
                alignment: .top
            )
        }
        .accentColor(Color(red: 0.0, green: 0.8, blue: 0.7))
        .preferredColorScheme(.dark)
        .onAppear {
            setupTabBarAppearance()
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            Analytics.logEvent("app_opened", parameters: [
                "events_cached": eventsManager.cachedEventsCount,
                "cache_valid": eventsManager.isCacheValid,
                "has_cached_data": eventsManager.cachedEventsCount > 0
            ])
            print("üìä [Analytics] App opened: cache=\(eventsManager.cachedEventsCount) events, valid=\(eventsManager.isCacheValid)")
            
            // ‚úÖ –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            handleInitialLoad()
        }
        .sheet(isPresented: $showingCacheSettings) {
            CacheSettingsView(eventsManager: eventsManager)
        }
    }

    // MARK: - Computed Properties
    
    /// –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    private var filteredEvents: [SportEvent] {
        var result = eventsManager.events

        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if !searchText.isEmpty {
            result = result.filter { event in
                event.name.localizedCaseInsensitiveContains(searchText) ||
                event.cityName.localizedCaseInsensitiveContains(searchText) ||
                event.sportName.localizedCaseInsensitiveContains(searchText)
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ (—Å –¥–µ–±–∞—É–Ω—Å–æ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞)
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                if !searchText.isEmpty { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∏—Å–∫ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                    Analytics.logEvent("search_performed", parameters: [
                        "query": searchText,
                        "query_length": searchText.count,
                        "results_found": result.count
                    ])
                    print("üìä [Analytics] Search performed: '\(searchText)' -> \(result.count) results")
                }
            }
        }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        result = result.filter { event in
            filterCriteria.matches(event: event)
        }

        return result
    }
    
    // MARK: - Private Methods
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ TabBar (—Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    private func setupTabBarAppearance() {
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π TabBar, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private func handleInitialLoad() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        eventsManager.loadCachedEventsImmediately()
        
        // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        Task {
            await eventsManager.loadEvents()
        }
    }
}








// MARK: - Cache Settings View
/// –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–µ—à–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏
struct CacheSettingsView: View {
    @ObservedObject var eventsManager: EventsDataManager
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
                VStack(alignment: .leading, spacing: 12) {
                    Text("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–µ—à–∞")
                        .font(.headline)
                        .foregroundColor(.white)
                    
                    VStack(alignment: .leading, spacing: 8) {
                        HStack {
                            Text("–°–æ–±—ã—Ç–∏—è:")
                            Spacer()
                            Text("\(eventsManager.cacheStatus.eventCount)")
                                .foregroundColor(.green)
                        }
                        
                        HStack {
                            Text("–†–∞–∑–º–µ—Ä:")
                            Spacer()
                            Text(eventsManager.cacheStatus.size)
                                .foregroundColor(.blue)
                        }
                        
                        HStack {
                            Text("–°—Ç–∞—Ç—É—Å:")
                            Spacer()
                            Text(eventsManager.cacheStatus.isValid ? "–ê–∫—Ç—É–∞–ª–µ–Ω" : "–£—Å—Ç–∞—Ä–µ–ª")
                                .foregroundColor(eventsManager.cacheStatus.isValid ? .green : .orange)
                        }
                        
                        if let lastUpdate = eventsManager.lastCacheUpdate {
                            HStack {
                                Text("–û–±–Ω–æ–≤–ª–µ–Ω:")
                                Spacer()
                                Text(DateFormatter.shortDateTime.string(from: lastUpdate))
                                    .foregroundColor(.gray)
                            }
                        }
                    }
                    .font(.body)
                    .foregroundColor(.white)
                }
                .padding()
                .background(Color.gray.opacity(0.2))
                .cornerRadius(12)
                
                // –î–µ–π—Å—Ç–≤–∏—è —Å –∫–µ—à–µ–º
                VStack(spacing: 12) {
                    Button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ") {
                        eventsManager.refreshEvents()
                    }
                    .buttonStyle(PrimaryButtonStyle())
                    
                    Button("–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à") {
                        eventsManager.clearCacheAndReload()
                    }
                    .buttonStyle(SecondaryButtonStyle())
                    
                    Button("Offline —Ä–µ–∂–∏–º") {
                        eventsManager.switchToOfflineMode()
                        dismiss()
                    }
                    .buttonStyle(SecondaryButtonStyle())
                }
                
                Spacer()
            }
            .padding()
            .background(Color.black)
            .navigationTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∞")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–ì–æ—Ç–æ–≤–æ") {
                        dismiss()
                    }
                    .foregroundColor(Color(red: 0.0, green: 0.8, blue: 0.7))
                }
            }
        }
        .preferredColorScheme(.dark)
    }
}

// MARK: - Button Styles
struct PrimaryButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .foregroundColor(.black)
            .padding()
            .frame(maxWidth: .infinity)
            .background(Color(red: 0.0, green: 0.8, blue: 0.7))
            .cornerRadius(10)
            .scaleEffect(configuration.isPressed ? 0.95 : 1.0)
    }
}

struct SecondaryButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .foregroundColor(Color(red: 0.0, green: 0.8, blue: 0.7))
            .padding()
            .frame(maxWidth: .infinity)
            .background(Color.gray.opacity(0.2))
            .cornerRadius(10)
            .scaleEffect(configuration.isPressed ? 0.95 : 1.0)
    }
}

// MARK: - Helper Extensions
extension DateFormatter {
    static let shortDateTime: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .short
        return formatter
    }()
}


struct CalendarView: View {
    var body: some View {
        ZStack {
            Color.black.ignoresSafeArea()
            VStack {
                Text("–ö–∞–ª–µ–Ω–¥–∞—Ä—å")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                    .foregroundColor(.white)
                Text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π")
                    .font(.subheadline)
                    .foregroundColor(.gray)
                    .multilineTextAlignment(.center)
                    .padding()
            }
        }
    }
}

struct FavoritesView: View {
    @StateObject private var eventsManager = EventsDataManager()
    @ObservedObject private var favoritesManager = FavoritesManager.shared
    
    var body: some View {
        NavigationView {
            ZStack {
                Color.black.ignoresSafeArea()
                
                if favoriteEvents.isEmpty {
                    // –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    VStack(spacing: 20) {
                        Image(systemName: "heart.slash")
                            .font(.system(size: 60))
                            .foregroundColor(.gray)
                        
                        Text("–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
                            .font(.appTitle2)
                            .foregroundColor(.white)
                        
                        Text("–î–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–∞–≤ –Ω–∞ ‚ô° –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
                            .font(.appBody)
                            .foregroundColor(.gray)
                            .multilineTextAlignment(.center)
                            .padding(.horizontal, 32)
                    }
                } else {
                    // –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
                    ScrollView {
                        LazyVStack(spacing: 12) {
                            ForEach(favoriteEvents) { event in
                                NavigationLink(destination: EventDetailView(event: event)) {
                                    EventCardView(event: event)
                                }
                                .buttonStyle(PlainButtonStyle())
                            }
                        }
                        .padding(.horizontal, 16)
                        .padding(.top, 20)
                    }
                }
            }
            .navigationTitle("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
            .navigationBarTitleDisplayMode(.large)
            .onAppear {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
                if eventsManager.events.isEmpty {
                    Task {
                        await eventsManager.loadEvents()
                    }
                }
            }
        }
        .preferredColorScheme(.dark)
    }
    
    // MARK: - Computed Properties
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    private var favoriteEvents: [SportEvent] {
        return favoritesManager.getFavoriteEvents(from: eventsManager.events)
    }
}

// MARK: - Active Filters View
struct ActiveFiltersView: View {
    @Binding var filterCriteria: FilterCriteria
    
    var body: some View {
        ScrollView(.horizontal, showsIndicators: false) {
            HStack(spacing: 8) {
                // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
                ForEach(filterCriteria.selectedCities, id: \.self) { city in
                    FilterChip(text: city, type: .city) {
                        filterCriteria.selectedCities.removeAll { $0 == city }
                    }
                }
                
                // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞
                ForEach(Array(filterCriteria.selectedSports), id: \.self) { sport in
                    FilterChip(text: sport, type: .sport) {
                        filterCriteria.selectedSports.remove(sport)
                    }
                }
                
                // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
                if filterCriteria.startDate != nil || filterCriteria.endDate != nil {
                    FilterChip(text: dateRangeText, type: .date) {
                        filterCriteria.startDate = nil
                        filterCriteria.endDate = nil
                    }
                }
                
                // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                Button(action: {
                    filterCriteria.reset()
                }) {
                    HStack(spacing: 4) {
                        Image(systemName: "xmark.circle.fill")
                            .font(.system(size: 12))
                        Text("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ")
                            .font(.custom("HelveticaNeue", size: 12))
                    }
                    .foregroundColor(.white)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(Color.red)
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                }
                .buttonStyle(PlainButtonStyle())
            }
            .padding(.horizontal, 16)
        }
    }
    
    private var dateRangeText: String {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd MMM"
        
        if let startDate = filterCriteria.startDate, let endDate = filterCriteria.endDate {
            return "\(formatter.string(from: startDate)) - \(formatter.string(from: endDate))"
        } else if let startDate = filterCriteria.startDate {
            return "–û—Ç \(formatter.string(from: startDate))"
        } else if let endDate = filterCriteria.endDate {
            return "–î–æ \(formatter.string(from: endDate))"
        }
        return ""
    }
}

// MARK: - Filter Chip
struct FilterChip: View {
    let text: String
    let type: FilterChipType
    let onRemove: () -> Void
    
    enum FilterChipType {
        case city, sport, date
        
        var color: Color {
            switch self {
            case .city: return Color(red: 0.2, green: 0.6, blue: 0.9)  // –°–∏–Ω–∏–π, —Å–æ—á–µ—Ç–∞—é—â–∏–π—Å—è —Å –±–∏—Ä—é–∑–æ–≤—ã–º
            case .sport: return Color(red: 0.0, green: 0.8, blue: 0.7)  // –í–∞—à —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –±–∏—Ä—é–∑–æ–≤—ã–π
            case .date: return Color(red: 0.9, green: 0.6, blue: 0.2)   // –û—Ä–∞–Ω–∂–µ–≤—ã–π, —Å–æ—á–µ—Ç–∞—é—â–∏–π—Å—è —Å –±–∏—Ä—é–∑–æ–≤—ã–º
            }
        }
        
        var icon: String {
            switch self {
            case .city: return "location"
            case .sport: return "figure.run"
            case .date: return "calendar"
            }
        }
    }
    
    var body: some View {
        Button(action: onRemove) {
            HStack(spacing: 4) {
                Image(systemName: type.icon)
                    .font(.system(size: 10))
                Text(text)
                    .font(.custom("HelveticaNeue", size: 12))
                    .lineLimit(1)
                Image(systemName: "xmark")
                    .font(.system(size: 8))
            }
            .foregroundColor(.black)
            .padding(.horizontal, 8)
            .padding(.vertical, 4)
            .background(type.color)
            .clipShape(RoundedRectangle(cornerRadius: 12))
        }
        .buttonStyle(PlainButtonStyle())
    }
}

#Preview {
    ContentView()
}
