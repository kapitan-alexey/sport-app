import Foundation

// MARK: - Sports Events Cache Manager
/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –Ω–∞ –¥–∏—Å–∫
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç offline –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –±—ã—Å—Ç—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class SportsEventsCache {
    
    // Singleton –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    static let shared = SportsEventsCache()
    private init() {}
    
    // MARK: - Constants
    private let cacheFileName = "sports_events_cache.json"
    private let lastUpdateKey = "lastSportsEventsUpdate"
    private let cacheValidityDuration: TimeInterval = 3600 // 1 —á–∞—Å
    
    // MARK: - Core Caching Methods
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–µ—à –Ω–∞ –¥–∏—Å–∫–µ
    /// - Parameter events: –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    func saveEvents(_ events: [SportEvent]) {
        do {
            // –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç
            let encoder = JSONEncoder()
            encoder.dateEncodingStrategy = .iso8601
            let data = try encoder.encode(events)
            
            // –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –≤ Caches Directory
            let cacheURL = getCacheFileURL()
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            try data.write(to: cacheURL)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ UserDefaults
            UserDefaults.standard.set(Date(), forKey: lastUpdateKey)
            
            print("‚úÖ [Cache] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ \(events.count) —Å–æ–±—ã—Ç–∏–π –≤ –∫–µ—à")
            logCacheInfo()
            
        } catch {
            print("‚ùå [Cache] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à: \(error.localizedDescription)")
        }
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–µ—à–∞
    /// - Returns: –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ nil, –µ—Å–ª–∏ –∫–µ—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    func loadCachedEvents() -> [SportEvent]? {
        do {
            let cacheURL = getCacheFileURL()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–µ—à–∞
            guard FileManager.default.fileExists(atPath: cacheURL.path) else {
                print("üìÇ [Cache] –§–∞–π–ª –∫–µ—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return nil
            }
            
            // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            let data = try Data(contentsOf: cacheURL)
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–æ–±—ã—Ç–∏—è
            let decoder = JSONDecoder()
            decoder.dateDecodingStrategy = .iso8601
            let events = try decoder.decode([SportEvent].self, from: data)
            
            print("‚úÖ [Cache] –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(events.count) —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–µ—à–∞")
            return events
            
        } catch {
            print("‚ùå [Cache] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–µ—à–∞: \(error.localizedDescription)")
            return nil
        }
    }
    
    // MARK: - Cache Validation
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞
    /// - Parameter maxAge: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
    /// - Returns: true –µ—Å–ª–∏ –∫–µ—à –∞–∫—Ç—É–∞–ª–µ–Ω, false –µ—Å–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
    func isCacheValid(maxAge: TimeInterval = 3600) -> Bool {
        guard let lastUpdate = UserDefaults.standard.object(forKey: lastUpdateKey) as? Date else {
            print("‚è∞ [Cache] –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            return false
        }
        
        let timeSinceUpdate = Date().timeIntervalSince(lastUpdate)
        let isValid = timeSinceUpdate < maxAge
        
        if isValid {
            let minutes = Int(timeSinceUpdate / 60)
            print("‚úÖ [Cache] –ö–µ—à –∞–∫—Ç—É–∞–ª–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω \(minutes) –º–∏–Ω. –Ω–∞–∑–∞–¥)")
        } else {
            let hours = Int(timeSinceUpdate / 3600)
            print("‚è∞ [Cache] –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª (–æ–±–Ω–æ–≤–ª–µ–Ω \(hours) —á. –Ω–∞–∑–∞–¥)")
        }
        
        return isValid
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
    func getLastUpdateDate() -> Date? {
        return UserDefaults.standard.object(forKey: lastUpdateKey) as? Date
    }
    
    // MARK: - Cache Management
    
    /// –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –∫–µ—à
    func clearCache() {
        do {
            let cacheURL = getCacheFileURL()
            
            if FileManager.default.fileExists(atPath: cacheURL.path) {
                try FileManager.default.removeItem(at: cacheURL)
                UserDefaults.standard.removeObject(forKey: lastUpdateKey)
                print("üóëÔ∏è [Cache] –ö–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
            } else {
                print("üìÇ [Cache] –§–∞–π–ª –∫–µ—à–∞ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            }
        } catch {
            print("‚ùå [Cache] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: \(error.localizedDescription)")
        }
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–µ—à–∞ –≤ –±–∞–π—Ç–∞—Ö
    func getCacheSize() -> Int64 {
        do {
            let cacheURL = getCacheFileURL()
            let attributes = try FileManager.default.attributesOfItem(atPath: cacheURL.path)
            return attributes[.size] as? Int64 ?? 0
        } catch {
            return 0
        }
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    func getFormattedCacheSize() -> String {
        let sizeInBytes = getCacheSize()
        
        if sizeInBytes < 1024 {
            return "\(sizeInBytes) B"
        } else if sizeInBytes < 1024 * 1024 {
            return String(format: "%.1f KB", Double(sizeInBytes) / 1024.0)
        } else {
            return String(format: "%.1f MB", Double(sizeInBytes) / (1024.0 * 1024.0))
        }
    }
    
    // MARK: - Private Helper Methods
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Ñ–∞–π–ª–∞ –∫–µ—à–∞ –≤ Caches Directory
    private func getCacheFileURL() -> URL {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Caches Directory
        let cacheDirectory = FileManager.default.urls(for: .cachesDirectory,
                                                     in: .userDomainMask).first!
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let appCacheDirectory = cacheDirectory.appendingPathComponent("SportsEventsApp")
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try? FileManager.default.createDirectory(at: appCacheDirectory,
                                               withIntermediateDirectories: true)
        
        return appCacheDirectory.appendingPathComponent(cacheFileName)
    }
    
    /// –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–µ—à–∞ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    private func logCacheInfo() {
        let size = getFormattedCacheSize()
        let lastUpdate = getLastUpdateDate()
        
        print("üìä [Cache] –†–∞–∑–º–µ—Ä: \(size)")
        if let update = lastUpdate {
            let formatter = DateFormatter()
            formatter.dateStyle = .short
            formatter.timeStyle = .short
            print("üìä [Cache] –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: \(formatter.string(from: update))")
        }
    }
}

// MARK: - Cache Loading Strategy
/// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
enum CacheLoadingStrategy {
    case cacheFirst       // –°–Ω–∞—á–∞–ª–∞ –∫–µ—à, –∑–∞—Ç–µ–º API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    case apiFirst         // –°–Ω–∞—á–∞–ª–∞ API, –∑–∞—Ç–µ–º –∫–µ—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
    case cacheOnly        // –¢–æ–ª—å–∫–æ –∫–µ—à (offline —Ä–µ–∂–∏–º)
    case apiOnly          // –¢–æ–ª—å–∫–æ API (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à)
}

// MARK: - Cache Result
/// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–µ—à–µ–º
enum CacheResult<T> {
    case success(T)
    case failure(Error)
    case empty
}

// MARK: - Cache Status
/// –°—Ç–∞—Ç—É—Å –∫–µ—à–∞ –¥–ª—è UI
struct CacheStatus {
    let hasCache: Bool
    let isValid: Bool
    let lastUpdate: Date?
    let size: String
    let eventCount: Int
    
    var description: String {
        if !hasCache {
            return "–ö–µ—à –ø—É—Å—Ç"
        }
        
        let validity = isValid ? "–∞–∫—Ç—É–∞–ª–µ–Ω" : "—É—Å—Ç–∞—Ä–µ–ª"
        return "\(eventCount) —Å–æ–±—ã—Ç–∏–π, \(validity), \(size)"
    }
}

extension SportsEventsCache {
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–µ—à–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
    func getCacheStatus() -> CacheStatus {
        let events = loadCachedEvents()
        let hasCache = events != nil
        let isValid = isCacheValid()
        let lastUpdate = getLastUpdateDate()
        let size = getFormattedCacheSize()
        let eventCount = events?.count ?? 0
        
        return CacheStatus(
            hasCache: hasCache,
            isValid: isValid,
            lastUpdate: lastUpdate,
            size: size,
            eventCount: eventCount
        )
    }
}
