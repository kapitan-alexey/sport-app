import Foundation
import FirebaseAnalytics

// MARK: - Favorites Manager
/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–±—ã—Ç–∏–π –≤ UserDefaults –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
class FavoritesManager: ObservableObject {
    
    // Singleton –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    static let shared = FavoritesManager()
    private init() {
        loadFavorites()
        // –í—Ä–µ–º–µ–Ω–Ω–æ: –æ—á–∏—Å—Ç–∏–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        // –£–±–µ—Ä–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
        // clearAllFavorites()
    }
    
    // MARK: - Properties
    private let favoritesKey = "favoriteEventIDs"
    
    // –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    @Published private(set) var favoriteEventIDs: Set<Int> = []
    
    // MARK: - Public Methods
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    /// - Parameter eventID: ID —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    func toggleFavorite(eventID: Int) {
        let wasAdded = !favoriteEventIDs.contains(eventID)
        
        if favoriteEventIDs.contains(eventID) {
            favoriteEventIDs.remove(eventID)
        } else {
            favoriteEventIDs.insert(eventID)
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        Analytics.logEvent(wasAdded ? "favorite_added" : "favorite_removed", parameters: [
            "event_id": eventID,
            "total_favorites": favoriteEventIDs.count
        ])
        
        saveFavorites()
        
        print("üíô [Favorites] –°–æ–±—ã—Ç–∏–µ \(eventID) \(wasAdded ? "–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤" : "—É–¥–∞–ª–µ–Ω–æ –∏–∑") –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        print("üìä [Analytics] Logged: \(wasAdded ? "favorite_added" : "favorite_removed"), total: \(favoriteEventIDs.count)")
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    /// - Parameter eventID: ID —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    /// - Returns: true –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    func isFavorite(eventID: Int) -> Bool {
        let result = favoriteEventIDs.contains(eventID)
        if result {
            print("üíô [Favorites] –°–æ–±—ã—Ç–∏–µ \(eventID) –ù–ê–ô–î–ï–ù–û –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞: \(favoriteEventIDs)")
        }
        return result
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    var favoritesCount: Int {
        return favoriteEventIDs.count
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    /// - Parameter allEvents: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    /// - Returns: –ú–∞—Å—Å–∏–≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    func getFavoriteEvents(from allEvents: [SportEvent]) -> [SportEvent] {
        return allEvents.filter { favoriteEventIDs.contains($0.id) }
    }
    
    /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    func clearAllFavorites() {
        favoriteEventIDs.removeAll()
        saveFavorites()
        print("üóëÔ∏è [Favorites] –í—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã")
    }
    
    // MARK: - Private Methods
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ ID –≤ UserDefaults
    private func saveFavorites() {
        let favoriteArray = Array(favoriteEventIDs)
        UserDefaults.standard.set(favoriteArray, forKey: favoritesKey)
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        UserDefaults.standard.synchronize()
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ ID –∏–∑ UserDefaults
    private func loadFavorites() {
        if let savedFavorites = UserDefaults.standard.array(forKey: favoritesKey) as? [Int] {
            favoriteEventIDs = Set(savedFavorites)
            print("‚úÖ [Favorites] –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(favoriteEventIDs.count) –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: \(favoriteEventIDs)")
        } else {
            favoriteEventIDs = []
            print("üìÇ [Favorites] –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        }
    }
}

// MARK: - Favorites Status
/// –°—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
struct FavoritesStatus {
    let count: Int
    let isEmpty: Bool
    
    var description: String {
        if isEmpty {
            return "–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"
        } else {
            return "\(count) –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"
        }
    }
}

extension FavoritesManager {
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è UI
    var status: FavoritesStatus {
        return FavoritesStatus(
            count: favoritesCount,
            isEmpty: favoriteEventIDs.isEmpty
        )
    }
}