import SwiftUI
import UIKit

// MARK: - Typography System
/// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Helvetica Neue –∏ Avenir Next
struct Typography {
    
    // MARK: - Font Names (—Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
    private enum FontName {
        // ‚úÖ SF Pro - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç iOS —Å –æ—Ç–ª–∏—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        static let sfProRegular = ".SFUI-Regular"
        static let sfProMedium = ".SFUI-Medium" 
        static let sfProSemiBold = ".SFUI-Semibold"
        static let sfProBold = ".SFUI-Bold"
        
        // ‚úÖ Avenir Next - –æ—Ç–ª–∏—á–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ Trade Gothic
        static let avenirNext = "AvenirNext-Regular"
        static let avenirNextMedium = "AvenirNext-Medium"
        static let avenirNextDemiBold = "AvenirNext-DemiBold"
        static let avenirNextBold = "AvenirNext-Bold"
        
        // ‚úÖ –î–ª—è –ø–ª–æ—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–ø–æ—Ö–æ–∂–µ –Ω–∞ Trade Gothic)
        static let avenirNextCondensed = "AvenirNextCondensed-Regular"
        static let avenirNextCondensedMedium = "AvenirNextCondensed-Medium"
        static let avenirNextCondensedDemiBold = "AvenirNextCondensed-DemiBold"
        static let avenirNextCondensedBold = "AvenirNextCondensed-Bold"
    }
    
    // MARK: - Font Weights & Styles (—Å–º–µ—à–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
    static let largeTitle = createFontSpecific(size: 34, fontName: "Arial-BoldMT", fallbackWeight: .bold)
    static let title1 = createFontSpecific(size: 28, fontName: "Arial-BoldMT", fallbackWeight: .bold)
    static let title2 = createFontSpecific(size: 22, fontName: "Arial-BoldMT", fallbackWeight: .semibold)
    static let title3 = createFontSpecific(size: 20, fontName: "Arial", fallbackWeight: .medium)
    
    // Helvetica Neue Condensed Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∏–ª—å)
    static let eventTitle = createFontSpecific(size: 17, fontName: "HelveticaNeue-CondensedBold", fallbackWeight: .semibold)
    static let eventDetailTitle = createFontSpecific(size: 24, fontName: "HelveticaNeue-CondensedBold", fallbackWeight: .semibold)
    static let headline = createFontSpecific(size: 17, fontName: "HelveticaNeue-CondensedBold", fallbackWeight: .bold)
    
    // Helvetica –¥–ª—è –∞–¥—Ä–µ—Å–∞ –∏ –¥–∞—Ç—ã (–∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏)
    static let subheadline = createFontSpecific(size: 15, fontName: "HelveticaNeue", fallbackWeight: .regular)
    static let eventDetailSubheadline = createFontSpecific(size: 14, fontName: "HelveticaNeue", fallbackWeight: .regular)
    static let eventDetailBody = createFontSpecific(size: 15, fontName: "HelveticaNeue", fallbackWeight: .regular)
    
    // –°–µ–∫—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–±—ã—Ç–∏—è - –º–µ–Ω–µ–µ –∂–∏—Ä–Ω—ã–µ
    static let eventDetailSectionTitle = createFontSpecific(size: 18, fontName: "HelveticaNeue-Medium", fallbackWeight: .medium)
    
    static let body = createFontSpecific(size: 17, fontName: "Arial", fallbackWeight: .regular)
    static let bodyMedium = createFontSpecific(size: 17, fontName: "Arial", fallbackWeight: .medium)
    
    static let callout = createFontSpecific(size: 16, fontName: "Arial", fallbackWeight: .regular)
    static let footnote = createFontSpecific(size: 13, fontName: "HelveticaNeue", fallbackWeight: .regular)
    static let caption1 = createFontSpecific(size: 12, fontName: "HelveticaNeue", fallbackWeight: .regular)
    static let caption2 = createFontSpecific(size: 11, fontName: "HelveticaNeue", fallbackWeight: .regular)
    
    // MARK: - Custom Sizes
    static func customSize(_ size: CGFloat, weight: FontWeight = .regular) -> Font {
        let fontName: String
        switch weight {
        case .bold, .heavy:
            fontName = FontName.avenirNextBold
        case .semibold:
            fontName = FontName.avenirNextDemiBold
        case .medium:
            fontName = FontName.avenirNextMedium
        case .light, .ultraLight, .thin:
            fontName = FontName.avenirNext
        default:
            fontName = FontName.avenirNext
        }
        
        return createFont(size: size, primary: fontName, weight: weight.swiftUIWeight)
    }
    
    // MARK: - Font Creation with Fallback
    private static func createFont(size: CGFloat, primary: String, weight: Font.Weight) -> Font {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Arial –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏
        if UIFont(name: "Arial", size: size) != nil {
            return Font.custom("Arial", size: size).weight(weight)
        } else {
            return Font.system(size: size, weight: weight, design: .default)
        }
    }
    
    // MARK: - Specific Font Creation
    private static func createFontSpecific(size: CGFloat, fontName: String, fallbackWeight: Font.Weight) -> Font {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
        if UIFont(name: fontName, size: size) != nil {
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç: \(fontName)")
            return Font.custom(fontName, size: size)
        } else {
            print("‚ö†Ô∏è –®—Ä–∏—Ñ—Ç \(fontName) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π")
            return Font.system(size: size, weight: fallbackWeight, design: .default)
        }
    }
    
    // MARK: - Font Weight Enum
    enum FontWeight {
        case ultraLight
        case thin
        case light
        case regular
        case medium
        case semibold
        case bold
        case heavy
        
        var swiftUIWeight: Font.Weight {
            switch self {
            case .ultraLight: return .ultraLight
            case .thin: return .thin
            case .light: return .light
            case .regular: return .regular
            case .medium: return .medium
            case .semibold: return .semibold
            case .bold: return .bold
            case .heavy: return .heavy
            }
        }
    }
    
    // MARK: - Font Debugging
    /// –ü–µ—á–∞—Ç–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    static func printAvailableFonts() {
        print("üî§ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–º–µ–π—Å—Ç–≤–∞ —à—Ä–∏—Ñ—Ç–æ–≤:")
        for family in UIFont.familyNames.sorted() {
            print("üìÅ \(family)")
            for font in UIFont.fontNames(forFamilyName: family) {
                print("   - \(font)")
            }
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    static func validateCustomFonts() {
        let fonts = [
            FontName.avenirNext,
            FontName.avenirNextMedium,
            FontName.avenirNextDemiBold,
            FontName.avenirNextBold,
            FontName.avenirNextCondensed,
            FontName.avenirNextCondensedMedium,
            FontName.avenirNextCondensedDemiBold,
            FontName.avenirNextCondensedBold,
            FontName.sfProRegular
        ]
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤:")
        for fontName in fonts {
            if UIFont(name: fontName, size: 16) != nil {
                print("‚úÖ \(fontName) - –¥–æ—Å—Ç—É–ø–µ–Ω")
            } else {
                print("‚ùå \(fontName) - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            }
        }
    }
}

// MARK: - Font Extension for Easy Usage
extension Font {
    // –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    static var appLargeTitle: Font { Typography.largeTitle }
    static var appTitle1: Font { Typography.title1 }
    static var appTitle2: Font { Typography.title2 }
    static var appTitle3: Font { Typography.title3 }
    static var appEventTitle: Font { Typography.eventTitle }  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    static var appEventDetailTitle: Font { Typography.eventDetailTitle }  // –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–±—ã—Ç–∏—è
    static var appHeadline: Font { Typography.headline }
    static var appSubheadline: Font { Typography.subheadline }
    static var appEventDetailSubheadline: Font { Typography.eventDetailSubheadline }  // –î–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–±—ã—Ç–∏—è
    static var appEventDetailBody: Font { Typography.eventDetailBody }  // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–±—ã—Ç–∏—è
    static var appEventDetailSectionTitle: Font { Typography.eventDetailSectionTitle }  // –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–µ–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–±—ã—Ç–∏—è
    static var appBody: Font { Typography.body }
    static var appBodyMedium: Font { Typography.bodyMedium }
    static var appCallout: Font { Typography.callout }
    static var appFootnote: Font { Typography.footnote }
    static var appCaption1: Font { Typography.caption1 }
    static var appCaption2: Font { Typography.caption2 }
    
    /// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    static func appCustom(_ size: CGFloat, weight: Typography.FontWeight = .regular) -> Font {
        Typography.customSize(size, weight: weight)
    }
}

// MARK: - Preview –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
struct TypographyPreview: View {
    
    @State private var showFontList = false
    
    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    
                    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏
                    Group {
                        Text("Large Title - Avenir Next Condensed Bold")
                            .font(.appLargeTitle)
                        
                        Text("Title 1 - Avenir Next Condensed DemiBold")
                            .font(.appTitle1)
                        
                        Text("Title 2 - Avenir Next Condensed Medium")
                            .font(.appTitle2)
                        
                        Text("Title 3 - Avenir Next Medium")
                            .font(.appTitle3)
                        
                        Text("Headline - Avenir Next DemiBold")
                            .font(.appHeadline)
                    }
                    
                    Divider()
                    
                    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏
                    Group {
                        Text("Subheadline - Avenir Next Regular")
                            .font(.appSubheadline)
                        
                        Text("Body - –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è. Avenir Next –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–∞–∫ –¥–ª—è English —Ç–∞–∫ –∏ –¥–ª—è –†—É—Å—Å–∫–æ–≥–æ")
                            .font(.appBody)
                        
                        Text("Body Medium - –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. Avenir Next Medium")
                            .font(.appBodyMedium)
                        
                        Text("Callout - Avenir Next Regular")
                            .font(.appCallout)
                    }
                    
                    Divider()
                    
                    // –ú–µ–ª–∫–∏–µ —Å—Ç–∏–ª–∏
                    Group {
                        Text("Footnote - SF Pro Regular")
                            .font(.appFootnote)
                        
                        Text("Caption 1 - SF Pro Regular")
                            .font(.appCaption1)
                        
                        Text("Caption 2 - SF Pro Regular")
                            .font(.appCaption2)
                    }
                    
                    Divider()
                    
                    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                    Group {
                        Text("Custom 24pt Bold - Avenir Next Bold")
                            .font(.appCustom(24, weight: .bold))
                        
                        Text("Custom 18pt Medium - Avenir Next Medium")
                            .font(.appCustom(18, weight: .medium))
                        
                        Text("Custom 14pt Light - Avenir Next Regular")
                            .font(.appCustom(14, weight: .light))
                    }
                    
                    Spacer(minLength: 50)
                }
                .padding()
            }
            .background(Color.black)
            .foregroundColor(.white)
            .navigationTitle("–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Debug") {
                        Typography.printAvailableFonts()
                        Typography.validateCustomFonts()
                    }
                }
            }
        }
    }
}

#Preview {
    TypographyPreview()
}